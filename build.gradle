plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

group = 'com.pragma'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation "org.mapstruct:mapstruct:1.5.2.Final"
	annotationProcessor "org.mapstruct:mapstruct-processor:1.5.2.Final"
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
	testImplementation 'com.h2database:h2'
	implementation 'com.h2database:h2'
	implementation "org.springdoc:springdoc-openapi-ui:1.6.14"
		implementation "org.springframework.boot:spring-boot-starter-security"
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

def coverageExcludes = [
		'**/dto/.*',
		'**/spi/.*',
		'**/api/.*',
		'**/mappers/.*',
		'**/repository/.*',
		'**/*.test',
		'**/generated/.*',
]

jacocoTestReport {
	reports {
		xml.required = true
		html.required = true
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: coverageExcludes)
		}))
	}
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

